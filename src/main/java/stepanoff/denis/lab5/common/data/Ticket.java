package stepanoff.denis.lab5.common.data;

import static stepanoff.denis.lab5.common.util.ConsoleWriter.*;

import java.io.Serializable;
import java.time.Instant;
import java.util.Date;

/**
 * Data class from task
 */
public class Ticket implements Comparable<Ticket>, Serializable {

    private Ticket() {    }

    /**
     * Unique id, greater zero, auto-generated.
     */
    private int id; //Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически

    /**
     * @return id of Ticket
     */
    public int getId() {
        return id;
    }

    /**
     * Not null
     */
    private String name; //Поле не может быть null, Строка не может быть пустой

    /**
     * @return name of Ticket
     */
    public String getName() {
        return name;
    }

    /**
     * Not null
     */
    private Coordinates coordinates; //Поле не может быть null

    /**
     * @return Coordinates of Ticket
     */
    public Coordinates getCoordinates() {
        return coordinates;
    }

    /**
     * Not null, autogenerated.
     */
    private java.util.Date creationDate; //Поле не может быть null, Значение этого поля должно генерироваться автоматически

    /**
     * @return Creation Date of Ticket
     */
    public Date getCreationDate() {
        return creationDate;
    }

    /**
     * not null, greater zero
     */
    private Double price; //Поле не может быть null, Значение поля должно быть больше 0

    /**
     * @return Price of Ticket
     */
    public double getPrice() {
        return this.price;
    }

    /**
     * Not null
     */
    private TicketType type; //Поле может быть null

    /**
     * @return Ticket Type
     */
    public TicketType getType() {
        return type;
    }

    /**
     * Not null
     */
    private Venue venue; //Поле может быть null

    /**
     * @return Ticket Venue
     */
    public Venue getVenue() {
        return venue;
    }

    /**
     * Generate Ticket (will be generated new id and creation date)
     * @return Builder of Ticket with new ID and Creation Date
     */
    public static Builder newTicket() {
        Builder builder = new Builder();
        return builder.id(-1)
                .creationDate(Date.from(Instant.now()));
    }

    /**
     * Generate Ticket (take old id and creation date)
     * @param id id of ticket will be created
     * @param creationDate creation Date if Ticket will be created
     * @return Builder of Ticket with specified ID
     */
    public static Builder existingTicket(int id, Date creationDate) {

        if (creationDate == null) throw new IllegalArgumentException("Creation Date can't be null");

        Builder builder = new Builder();
        return builder.id(id)
                .creationDate(creationDate);
    }

    /**
     * Get Mutable version of this Ticket
     * @return Builder initialized as to build this Ticket
     */
    public Builder builder() {
        return new Builder(this.copy());
    }

    @Override
    public int compareTo(Ticket ticket) {
        return this.name.compareTo(ticket.getName());
    }

    /**
     * Builder for Ticket
     */
    public static class Builder {

        private final Ticket ticket;

        private Builder() {
            this.ticket = new Ticket();
        }

        private Builder(Ticket ticket) {
            this.ticket = ticket;
        }

        private Builder id(int id) {
            this.ticket.id = id;
            return this;
        }

        /**
         * Set name
         * @param name name for Ticket
         * @return Builder
         */
        public Builder name(String name) {
            if (name == null || name.isEmpty())
                throw new IllegalArgumentException("Name can't be null or empty");

            this.ticket.name = name;
            return this;
        }

        /**
         * set coordinates
         * @param coordinates coordinates for Ticket
         * @return Builder
         */
        public Builder coordinates(Coordinates coordinates) {
            if (coordinates == null)
                throw new IllegalArgumentException("Coordinates can't be null");

            this.ticket.coordinates = coordinates;
            return this;
        }

        /**
         * set coordinates
         * @param x x value in coordinates for Ticket
         * @param y y value in coordinates for Ticket
         * @return Builder
         */
        public Builder coordinates(double x, double y) {
            return this.coordinates(Coordinates.create(x, y));
        }

        /**
         * set coordinates
         * @param builder initialized Builder of coordinates for Ticket
         * @return Builder
         */
        public Builder coordinates(Coordinates.Builder builder) {
            return this.coordinates(builder.build());
        }

        private Builder creationDate(Date creationDate) {
            this.ticket.creationDate = creationDate;
            return this;
        }

        /**
         * Set price
         * @param price price for Ticket
         * @return Builder
         */
        public Builder price(double price) {
            if (price <= 0)
                throw new IllegalArgumentException("Price must be greater zero");

            this.ticket.price = price;
            return this;
        }

        /**
         * set price
         * @param price price as String for Ticket
         * @return Builder
         */
        public Builder price(String price) {
            return this.price(Double.parseDouble(price));
        }

        /**
         * set type
         * @param ticketType TicketType for Ticket
         * @return Builder
         */
        public Builder ticketType(TicketType ticketType) {
            if (ticketType == null)
                throw new IllegalArgumentException("Ticket Type can't be null");

            this.ticket.type = ticketType;
            return this;
        }

        /**
         * set type
         * @param ticketType TicketType as String for Ticket
         * @return Builder
         */
        public Builder ticketType(String ticketType) {
            return this.ticketType(TicketType.valueOf(ticketType.toUpperCase()));
        }

        /**
         * Set venue
         * @param venue venue for Ticket
         * @return Builder
         */
        public Builder venue(Venue venue) {
            if (venue == null)
                throw new IllegalArgumentException("Venue can't be null");

            this.ticket.venue = venue;
            return this;
        }

        /**
         * set venue
         * @param builder venue as initialized Builder
         * @return Builder
         */
        public Builder venue(Venue.Builder builder) {
            return this.venue(builder.build());
        }

        /**
         * Build Ticket with specified values
         * @return Ticket
         */
        public Ticket build() {
            if (this.ticket.name == null || this.ticket.coordinates == null || this.ticket.price == null
                    || this.ticket.type == null || this.ticket.venue == null)
                throw new NotInitializedEntityException("Ticket is not fully initialized but built.");

            return this.ticket;
        }
    }

    @Override
    public boolean equals(Object o) {
        if (!(o instanceof Ticket)) return false;

        Ticket ticket = (Ticket) o;

        return ticket.id == this.id &&
                ticket.name.equals(this.name) &&
                ticket.coordinates.equals(this.coordinates) &&
                ticket.creationDate.compareTo(this.creationDate) == 0 &&
                ticket.price.equals(this.price) &&
                ticket.type.equals(this.type) &&
                ticket.venue.equals(this.venue);
    }

    @Override
    public int hashCode() {
        return (int)(id + name.hashCode() + coordinates.hashCode() + creationDate.hashCode()  +price +
                type.ordinal() + venue.hashCode());
    }

    @Override
    public String toString() {
        return getColored("Ticket", Color.PURPLE) + "(id = " + this.id + ") {" +
                getColored("\n\tCreation Date = ", Color.GREEN) + this.creationDate +
                getColored("\n\tName = ", Color.GREEN) + this.name +
                getColored("\n\tCoordinates = ", Color.GREEN) + this.coordinates +
                getColored("\n\tPrice = ", Color.GREEN) + String.format("%.2f", this.price) +
                getColored("\n\tType = ", Color.GREEN) + this.type.name().toLowerCase() +
                getColored("\n\tVenue = ", Color.GREEN) + this.venue + "\n}";
    }

    /**
     * Make a copy
     * @return the same Ticket
     */
    public Ticket copy() {
        return new Builder().id(this.id)
                .name(this.name)
                .coordinates(this.coordinates.copy())
                .creationDate(this.creationDate)
                .price(this.price)
                .ticketType(this.type)
                .venue(this.venue.copy())
                .build();
    }
}
